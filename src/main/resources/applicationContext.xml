<?xml version="1.0" encoding="UTF-8"?>
<!--使用注解，是需要命名空间和约束文件。以下就是一些约束文件-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--组件扫描和自动装配。。。提示这个路径下的类是使用注解的-->
    <context:component-scan base-package="com.ptteng.gwj"/>

    <!-- 是Aspect注解起作用：自动为匹配的类生产代理对象 -->
    <aop:aspectj-autoproxy/>

    <!--1.载属性配置文件。。。数据库信息-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--或者这样配置-->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">-->
    <!--<property name="location" value="classpath:jdbc.properties"/>-->
    <!--</bean>-->

    <!--2.数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 配置数据源 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="20" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="50" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

    </bean>


    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <!--3.配置sqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

        <!--注入连接池-->
        <property name="dataSource" ref="dataSource"/>

        <!--扫描entities包，使用别名-->
        <property name="typeAliasesPackage" value="com.ptteng.gwj.entities"/>

        <!-- 自动扫描mapping.xml文件,扫描sql配置文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"/>

        <!--配置mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>


    <!--4.配置DAO接口所在包名，动态实现dao接口，注入到Spring容器，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

        <!--注入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

        <!--给出需要扫描的Dao接口-->
        <property name="basePackage" value="com.ptteng.gwj.dao"/>

    </bean>


    <!--5.事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--6.配置基于注解的声明式事务-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--7.memcached注入-->
    <bean id="memcachedPool" class="com.whalin.MemCached.SockIOPool" factory-method="getInstance" init-method="initialize">
        <constructor-arg value="neeaMemcachedPool"/>

        <property name="servers">
            <list>
                <value>127.0.0.1:11211</value>
            </list>
        </property>

        <!--初始化时对每个服务器建立的连接数目 -->
        <property name="initConn" value="20"/>
        <!--每个服务器建立最小的连接数，当自查线程发现与某个服务器建立连接数目小于这个数目时会弥补剩下的连接 -->
        <property name="minConn" value="10"/>
        <!--每个服务器建立最大的连接数，当自查线程发现与某个服务器建立连接数目大于这个数目时就会逐个检查这些连接的空闲时间是
        否大于maxConn，如果大于会关闭这些连接，直到连接数等于maxConn -->
        <property name="maxConn" value="50"/>
        <!--Socket的参数，如果是true在写数据时不缓冲，立即发送出去 -->
        <property name="nagle" value="false"/>
        <!--Socket阻塞读取数据的超时时间 -->
        <property name="socketTO" value="3000"/>
    </bean>

    <bean id="memcachedClient" class="com.whalin.MemCached.MemCachedClient">
        <constructor-arg value="neeaMemcachedPool"/>
    </bean>


    <!--8.redis连接池的配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大连接数-->
        <property name="maxTotal" value="300"/>
        <!--最大空闲连接数-->
        <property name="maxIdle" value="100"/>
        <!--获取连接时最大等待毫秒-->
        <property name="maxWaitMillis" value="1000"/>
        <!--在获取连接的时候检查有效性，默认false-->
        <property name="testOnBorrow" value="true"/>
    </bean>

    <!--redis的连接池pool，不是必选项：timeout/password-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="127.0.0.1"/>
        <constructor-arg name="port" value="6379" type="int"/>
        <constructor-arg name="timeout" value="100000" type="int"/>
        <constructor-arg name="password" value="123456"/>
    </bean>
</beans>